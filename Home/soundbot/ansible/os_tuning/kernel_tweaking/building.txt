Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4

====== building ======
Created Monday 26 June 2017

https://fedoraproject.org/wiki/Building_a_custom_kernel

https://aur.archlinux.org/packages/linux-rt/

https://rt.wiki.kernel.org/index.php/Main_Page

http://www.osadl.org/projects-live-cd.0.html

https://www.osadl.org/Profile-of-system-in-rack-4-slot-6.qa-profile-r4s6.0.html

https://www.osadl.org/Profile-of-system-in-rack-0-slot-0.qa-profile-r0s0.0.html#kernel

apparently you can also patch the nvidia drivers;
https://aur.archlinux.org/packages/nvidia-rt/
these are instructions to mod nvidia with the current rpm packages; https://cm-mail.stanford.edu/pipermail/planetccrma/2014-April/018347.html

http://events.linuxfoundation.org/images/stories/pdf/eeus2012_singhvi.pdf

~~git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git~~
no, do not do this one. this repo is for release candiates only. in other words, 
you can't pull a specifc tag/branch

~~git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git~~
~~git checkout tags/v4.9.33~~
git checkout tags/v4.11.5

this is the branch we're on now:
http://pkgs.fedoraproject.org/cgit/rpms/kernel.git/tree/?h=f25&id=324841e6242e466f808961cbbed55842bf8bee29


git clone https://src.fedoraproject.org/git/rpms/kernel.git
git checkout -b 4.11.5 32ae435a9cb269bc9de499608b9928d635be21fa

make xconfig;


--------------------


Full dynticks system (tickless) (NO_HZ_FULL)

CONFIG_NO_HZ_FULL:

Adaptively try to shutdown the tick whenever possible, even when
the CPU is running tasks. Typically this requires running a single
task on the CPU. Chances for running tickless are maximized when
the task mostly runs in userspace and has few kernel activity.

You need to fill up the nohz_full boot parameter with the
desired range of dynticks CPUs.

This is implemented at the expense of some overhead in user <-> kernel
transitions: syscalls, exceptions and interrupts. Even when it's
dynamically off.

Say N.

Symbol: NO_HZ_FULL [=n]
Type : boolean
Prompt: Full dynticks system (tickless)
Location:
-> General setup
-> Timers subsystem
-> Timer tick handling (<choice> [=y])
Defined at kernel/time/Kconfig:89
Depends on: <choice> && !ARCH_USES_GETTIMEOFFSET [=n] && GENERIC_CLOCKEVENTS [=y] && SMP [=y] && HAVE_CONTEXT_TRACKING [=y] && HAVE_VIRT_CPU_ACCOUNTING_GEN [=y]
Selects: NO_HZ_COMMON [=y] && RCU_NOCB_CPU [=y] && VIRT_CPU_ACCOUNTING_GEN [=n] && IRQ_WORK [=y]

https://wiki.linuxfoundation.org/realtime/documentation/howto/tools/ticklesskernel


--------------------


Detect full-system idle state for full dynticks system (NO_HZ_FULL_SYSIDLE)

CONFIG_NO_HZ_FULL_SYSIDLE:

At least one CPU must keep the scheduling-clock tick running for
timekeeping purposes whenever there is a non-idle CPU, where
"non-idle" also includes dynticks CPUs as long as they are
running non-idle tasks. Because the underlying adaptive-tick
support cannot distinguish between all CPUs being idle and
all CPUs each running a single task in dynticks mode, the
underlying support simply ensures that there is always a CPU
handling the scheduling-clock tick, whether or not all CPUs
are idle. This Kconfig option enables scalable detection of
the all-CPUs-idle state, thus allowing the scheduling-clock
tick to be disabled when all CPUs are idle. Note that scalable
detection of the all-CPUs-idle state means that larger systems
will be slower to declare the all-CPUs-idle state.

Say Y if you would like to help debug all-CPUs-idle detection.

Say N if you are unsure.

Symbol: NO_HZ_FULL_SYSIDLE [=n]
Type : boolean
Prompt: Detect full-system idle state for full dynticks system
Location:
-> General setup
-> Timers subsystem
Defined at kernel/time/Kconfig:129
Depends on: GENERIC_CLOCKEVENTS [=y] && NO_HZ_FULL [=y]


--------------------

This is purely to save memory - each supported CPU adds
approximately eight kilobytes to the kernel image.

Symbol: NR_CPUS [=4]
Type : integer
Range : [2 512]
Prompt: Maximum number of CPUs
Location:
-> Processor type and features
Defined at arch/x86/Kconfig:917

from 4 to 8


--------------------

Suspend to RAM and standby (SUSPEND)

CONFIG_SUSPEND:

Allow the system to enter sleep states in which main memory is
powered and thus its contents are preserved, such as the
suspend-to-RAM state (e.g. the ACPI S3 state).

Symbol: SUSPEND [=n]
Type : boolean
Prompt: Suspend to RAM and standby
Location:
-> Power management and ACPI options
Defined at kernel/power/Kconfig:1
Depends on: ARCH_SUSPEND_POSSIBLE [=y]

disable


--------------------

Hibernation (aka 'suspend to disk') (HIBERNATION)

CONFIG_HIBERNATION:

Enable the suspend to disk (STD) functionality, which is usually
called "hibernation" in user interfaces. STD checkpoints the
system and powers it off; and restores that checkpoint on reboot.

You can suspend your machine with 'echo disk > /sys/power/state'
after placing resume=/dev/swappartition on the kernel command line
in your bootloader's configuration file.

Alternatively, you can use the additional userland tools available
from <http://suspend.sf.net>.

In principle it does not require ACPI or APM, although for example
ACPI will be used for the final steps when it is available. One
of the reasons to use software suspend is that the firmware hooks
for suspend states like suspend-to-RAM (STR) often don't work very
well with Linux.

It creates an image which is saved in your active swap. Upon the next
boot, pass the 'resume=/dev/swappartition' argument to the kernel to
have it detect the saved image, restore memory state from it, and
continue to run as before. If you do not want the previous state to
be reloaded, then use the 'noresume' kernel command line argument.
Note, however, that fsck will be run on your filesystems and you will
need to run mkswap against the swap partition used for the suspend.

It also works with swap files to a limited extent (for details see
<file:Documentation/power/swsusp-and-swap-files.txt>).

Right now you may boot without resuming and resume later but in the
meantime you cannot use the swap partition(s)/file(s) involved in
suspending. Also in this case you must not use the filesystems
that were mounted before the suspend. In particular, you MUST NOT
MOUNT any journaled filesystems mounted before the suspend or they
will get corrupted in a nasty way.

For more information take a look at <file:Documentation/power/swsusp.txt>.

Symbol: HIBERNATION [=n]
Type : boolean
Prompt: Hibernation (aka 'suspend to disk')
Location:
-> Power management and ACPI options
Defined at kernel/power/Kconfig:34
Depends on: SWAP [=y] && ARCH_HIBERNATION_POSSIBLE [=y]
Selects: HIBERNATE_CALLBACKS [=n] && LZO_COMPRESS [=y] && LZO_DECOMPRESS [=y] && CRC32 [=y]

disable

--------------------


performance (CPU_FREQ_DEFAULT_GOV_PERFORMANCE)

CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE:

Use the CPUFreq governor 'performance' as default. This sets
the frequency statically to the highest frequency supported by
the CPU.

Symbol: CPU_FREQ_DEFAULT_GOV_PERFORMANCE [=n]
Type : boolean
Prompt: performance
Location:
-> Power management and ACPI options
-> CPU Frequency scaling
-> CPU Frequency scaling (CPU_FREQ [=y])
-> Default CPUFreq governor (<choice> [=y])
Defined at drivers/cpufreq/Kconfig:48
Depends on: <choice>
Selects: CPU_FREQ_GOV_PERFORMANCE [=y]

performance


--------------------

Amateur Radio support (HAMRADIO)

CONFIG_HAMRADIO:

If you want to connect your Linux box to an amateur radio, answer Y
here. You want to read <http://www.tapr.org/>
and more specifically about AX.25 on Linux
<http://www.linux-ax25.org/>.

Note that the answer to this question won't directly affect the
kernel: saying N will just cause the configurator to skip all
the questions about amateur radio.

Symbol: HAMRADIO [=y]
Type : boolean
Prompt: Amateur Radio support
Location:
-> Networking support (NET [=y])
Defined at net/ax25/Kconfig:5
Depends on: NET [=y] && !S390

disable


--------------------

Wireless (WIRELESS)

There is no help available for this option.
Symbol: WIRELESS [=y]
Type : boolean
Prompt: Wireless
Location:
-> Networking support (NET [=y])
Defined at net/Kconfig:375
Depends on: NET [=y] && !S390
Selected by: WLAN [=y] && NETDEVICES [=y] && !S390 && NET [=y]

disable everything in this tree


--------------------

WiMAX Wireless Broadband support (WIMAX)

CONFIG_WIMAX:


Select to configure support for devices that provide
wireless broadband connectivity using the WiMAX protocol
(IEEE 802.16).

Please note that most of these devices require signing up
for a service plan with a provider.

The different WiMAX drivers can be enabled in the menu entry

Device Drivers > Network device support > WiMAX Wireless
Broadband devices

If unsure, it is safe to select M (module).

Symbol: WIMAX [=m]
Type : tristate
Prompt: WiMAX Wireless Broadband support
Location:
-> Networking support (NET [=y])
Defined at net/wimax/Kconfig:5
Depends on: NET [=y] && (RFKILL [=m] || !RFKILL [=m])

disable


--------------------

Overlay filesystem support (OVERLAY_FS)

CONFIG_OVERLAY_FS:

An overlay filesystem combines two filesystems - an 'upper' filesystem
and a 'lower' filesystem. When a name exists in both filesystems, the
object in the 'upper' filesystem is visible while the object in the
'lower' filesystem is either hidden or, in the case of directories,
merged with the 'upper' object.

For more information see Documentation/filesystems/overlayfs.txt

Symbol: OVERLAY_FS [=m]
Type : tristate
Prompt: Overlay filesystem support
Location:
-> File systems
Defined at fs/overlayfs/Kconfig:1

enable this


--------------------

config XFS_RT
	bool "XFS Realtime subvolume support"
	depends on XFS_FS
	help
	  If you say Y here you will be able to mount and use XFS filesystems
	  which contain a realtime subvolume.  The realtime subvolume is a
	  separate area of disk space where only file data is stored.  It was
	  originally designed to provide deterministic data rates suitable
	  for media streaming applications, but is also useful as a generic
	  mechanism for ensuring data and metadata/log I/Os are completely
	  separated.  Regular file I/Os are isolated to a separate device
	  from all other requests, and this can be done quite transparently
	  to applications via the inherit-realtime directory inode flag.

'''
	  See the xfs man page in section 5 for additional information.
'''


--------------------






make -j8 bzImage
make -j8 modules

#make -j8 modules_install
#make install



